const VALUES = [
  { id: "scissors", value: "‚úåÔ∏è" },
  { id: "rock", value: "‚úä" },
  { id: "paper", value: "ü´±" },
];

//D·ª±a v√†o index ƒë·ªÉ so s√°nh

//Ph√¢n t√≠ch logic
//valuePlayer v√† valueUser => "scissors" | "rock" | "paper"
//t·ª´ valuePlayer v√† valueUser duy·ªát value t√¨m ID n√†o gi·ªëng
//indexPlayer v√† indexUser
//Khi n√†o th·∫Øng
// 0 - 2 = -2
// 1 - 0 - 1
// 2 -1 = 1
// => indexPlayer - indexcomputer = 1 || -2 th√¨ th·∫Øng     return 1

//Khi n√†o h√≤a indexPlayer - indexcomputer = 0 th√¨         return 0

// c√≤n l·∫°i th√¨ thua                                   return -1



// X·ª≠ l√≠ tr√≤ ch∆°i
let i = 0;
const handleChange = () => {
  let computer = document.querySelector("#computer");
  computer.textContent = VALUES[i].value;
  computer.setAttribute("data-id", VALUES[i].id);
  i = i === VALUES.length - 1 ? 0 : ++i;
};

let interval = setInterval(handleChange, 100);

//H√†m compare: so s√°nh gi√° tr·ªã ph√¢n th·∫Øng 1 h√≤a 0 thua -1

const compare = (valuePlayer, valueComputer) => {
  //t√¨m index c·ªßa c√°c value t∆∞∆°ng ·ª©ng
  let indexPlayer = VALUES.findIndex((item) => item.id == valuePlayer);
  let indexComputer = VALUES.findIndex((item) => item.id == valueComputer);
  let result = indexPlayer - indexComputer;
  if ([1, -2].includes(result)) return 1;
  else if (result == 0) return 0;
  else return -1;
};

let playerItem = document.querySelectorAll(".user");

//Duy·ªát qua c√°c item c·ªßa ng∆∞·ªùi d√πng
playerItem.forEach((item) => {
  //v√† t·∫•t c·∫£ b·ªçn n√≥ ƒë·ªÅu nghe s·ª± ki·ªán
  item.addEventListener("click", (event) => {
    // D·ª´ng m√°y l·∫°i v√† l·∫•y data-id
    clearInterval(interval);
    //L·∫•y data-id c·ªßa m√°y
    let computer = document.querySelector("#computer");
    let valueComputer = computer.dataset.id; //.getAttribute("data-id")

    // L·∫•y ID c·ªßa h·∫±ng v·ª´a nh·∫•n
    let valuePlayer = event.target.id;

    // so s√°nh

    let result = compare(valuePlayer, valueComputer);

    // Duy·ªát c√°c n√∫t v√† x√≥a actived
    playerItem.forEach((_item) => {
      _item.classList.remove("actived");
      _item.style.pointerEvents = "none";
    });
    // Th√™m actived cho c√°c n√∫t v·ª´a nh·∫•n
    event.target.classList.add("actived");

    // k·∫øt lu·∫≠n v√† in th√¥ng b√°o
    let newItem = document.createElement("div");
    newItem.classList.add("alert");
    let msg = "";
    if (result == 1) {
      msg = "B·∫°n Th·∫Øng";
      newItem.classList.add("alert-success");
    } else if (result == 0) {
      msg = "B·∫°n H√≤a";
      newItem.classList.add("alert-warning");
    } else {
      msg = "B·∫°n Thua";
      newItem.classList.add("alert-dark");
    }
    newItem.textContent = msg;
    document.querySelector(".notification").appendChild(newItem);

    // Hi·ªán n√∫t ch∆°i l·∫°i
    document.querySelector("#play-again").classList.remove("d-none");
  });
});

// s·ª± ki·ªán click ch∆°i l·∫°i
document
  .querySelector(".btn-play-again")
  .addEventListener("click", (event) => {
    clearInterval(interval);
    interval = setInterval(handleChange, 100);
    // x√≥a actived c·ªßa c√°c n√∫t
    playerItem.forEach((item) => {
        item.classList.remove("actived");
        item.style.pointerEvents = "";
    })
    //x√≥a th√¥ng b√°o v√† kh·ªëi n√∫t ch∆°i l·∫°i
    document.querySelector(".notification").innerHTML = "";
    document.querySelector("#play-again").classList.add("d-none");
  });

  //
